# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy API

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  IMAGE_NAME: montagsmaler-api

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        working-directory: ./montagsmaler-api
        run: npm install
      - name: Run unit tests
        working-directory: ./montagsmaler-api
        run: npm run test
      - name: Run e2e tests
        working-directory: ./montagsmaler-api
        run: npm run test:e2e
        env:
          USER_POOL_ID: us-east-1_LKnyH8xyK
          CLIENT_ID: imrcgq4gedp29idmtvaq97mtw
          AWS_REGION: us-east-1
          USE_FILE: false

  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    # if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        working-directory: ./montagsmaler-api
        run: docker build . --file Dockerfile --tag $IMAGE_NAME
      # - name: Log into registry
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      # - name: Push image
      #   run: |
      #     IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "master" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION
      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION
