# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy API

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  IMAGE_NAME: montagsmaler-api

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        working-directory: ./montagsmaler-api
        run: npm install
      - name: Run unit tests
        working-directory: ./montagsmaler-api
        run: npm run test
      - name: Run e2e tests
        working-directory: ./montagsmaler-api
        run: npm run test:e2e
        env:
          USER_POOL_ID: us-east-1_LKnyH8xyK
          CLIENT_ID: imrcgq4gedp29idmtvaq97mtw
          AWS_REGION: us-east-1
          USE_FILE: false
  push:
    # Ensure test job passes before pushing image.
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: montagsmaler
          IMAGE_TAG: latest
        working-directory: ./montagsmaler-api
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      #- name: Render Redis Container
      #  id: render-redis
      #  uses: aws-actions/amazon-ecs-render-task-definition@v1
      #  with:
      #    task-definition: montagsmaler-api/task-definition.json
      #    container-name: montagsmaler-redis
      #    image: redis
    
      - name: Add secrets to Task Definition
        run: |
          sed -i --expression "s@<aws_access_key_id>@$AWS_ACCESS_KEY_ID@" montagsmaler-api/task-definition.json
          sed -i --expression "s@<aws_secret_access_key>@$AWS_SECRET_ACCESS_KEY@" montagsmaler-api/task-definition.json
          sed -i --expression "s@<aws_session_token>@$AWS_SESSION_TOKEN@" montagsmaler-api/task-definition.json
          sed -i --expression "s@<aws_region>@$AWS_REGION@" montagsmaler-api/task-definition.json
          sed -i --expression "s@<aws_task_execution_role>@$AWS_TASK_EXECUTION_ROLE@" montagsmaler-api/task-definition.json
          sed -i --expression "s@<aws_s3_bucket>@$AWS_S3_BUCKET@" montagsmaler-api/task-definition.json
          sed -i --expression "s@<user_pool_id>@$USER_POOL_ID@" montagsmaler-api/task-definition.json
          sed -i --expression "s@<client_id>@$CLIENT_ID@" montagsmaler-api/task-definition.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1
          AWS_TASK_EXECUTION_ROLE: ${{ secrets.AWS_TASK_EXECUTION_ROLE }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          USER_POOL_ID: ${{ secrets.USER_POOL_ID }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
    
      - name: Render API Container
        id: render-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: montagsmaler-api/task-definition.json
          container-name: montagsmaler-api
          image: ${{ steps.build-image.outputs.image }}
          
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api.outputs.task-definition }}
          service: montagsmaler-servicelb
          cluster: montagsmaler
          wait-for-service-stability: true

